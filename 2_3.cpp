#include<iostream>
using namespace std;

class DemoClass
{
    public:
        DemoClass(int i);
        ~DemoClass();
};
/* 构造函数(constructor)是一种特殊的成员函数
 * 它为对象初始化提供了功能更强，使用更方便的途径
 * 类名::类名(参数说明)
 * {
 *      初始化代码
 * }
 * 1.构造函数的名字必须与类的名字相同；
 * 2.定义构造函数时不能指定返回类型；
 * 3.构造函数的代码与其它函数一样，但一般不直接调用(显示调用)；
 * 4.创建类的一个新对象时，会隐式地自动调用构造函数。
 *   也就是说，当程序中声明一个新对象时，
 *   程序会自动调用该对象所属类中定义的构造函数来初始化这个对象的状态；
 * 5.若在定义类时没有定义构造函数，C++会自动为该类创建一个缺省(default)
 *   的构造函数。这个缺省构造函数没有任何形式参数，且函数体为空。
 */
DemoClass::DemoClass(int i)
{
    cout << "Initial value is " << i << endl;
}
/* 析构函数(destructor)也是一种特殊的成员函数
 * 它在对象撤销时执行一些清理任务
 * 例如在建立对象时用new开辟了一片内存空间，
 * delete会自动调用析构函数后释放内存
 * 类名::~类名()
 * {
 * }
 * 1.析构函数的名字必须是在类名前加上一个波纹号“~”，
 *   以区别于构造函数；
 * 2.定义析构函数时也不能指定返回类型；
 * 3.在对象消亡时，隐式地自动调用析构函数。
 *   也就是说，当程序中一个对象作用结束时，
 *   程序会自动调用该对象所属类中定义的析构函数来清除这个对象所占的存储空间；
 * 4.若在定义类时没有定义析构函数，C++会自动为该类创建一个缺省的析构函数。
 *   这个缺省析构函数没有任何形式的参数，且函数体为空。
 */
DemoClass::~DemoClass()
{
    cout << "destructor " << endl;
}
int main()
{
    DemoClass obj(30);
    cout << "This is the end main()" << endl;
    return 0;
}